2

Міністерство освіти і науки України Харківський національний університет радіоелектроніки





Кафедра програмної інженерії




ЗВІТ
до лабораторної роботи №3
з дисципліни "Архітектура програмного забезпечення"








Виконав:	Перевірив:
ст. гр ПЗПІ-21-11                                                             ст. викл. кафедри ПІ
Коханевич П.Г.	Сокорчук І.П.









Харків 2024

МЕТА РОБОТИ


Мета даної лабораторної роботи розробити IoT частину для програмної системи для контролю за тваринами в спеціальному готелі для тварин. Навести опис прийнятих інженерних рішень та архітектури. Показати склад компонентів та структуру програми.

ЗАВДАННЯ


На лабораторній роботі №3 потрібно розробити IoT частину програмної системи.

 ХІД РОБОТИ
1 ОПИС  ПРИЙНЯТИХ ІНЖЕНЕРНИХ РІШЕНЬ

Інтернет речей (IoT) надав широкі можливості для автоматизації та покращення управління різними системами, зокрема в галузі догляду за тваринами.  Розділ розглядає реалізацію IoT частини для програмної системи контролю за тваринами в спеціальному готелі для тварин. 
Використовуючи платформу Wokwi, був створений прототип, що дозволяє здійснювати моніторинг умов утримання тварин та передавати ці дані на сервер для подальшої обробки.  Платформа Wokwi дозволила швидко та зручно моделювати та тестувати IoT пристрої. Вона забезпечує віртуальне середовище для програмування та налагодження мікроконтролерів та їх периферій. Основними компонентами IoT частини є мікроконтролер ESP32, сенсори DHT22 для вимірювання температури та вологості, фотоелектричний резистор для вимірювання освітленості. Усі ці компоненти об'єднані в єдину систему, що дозволяє збирати та передавати дані про умови утримання тварин на сервері.
ESP32 - центральний вузол системи, який керує всіма сенсорами та здійснює обробку даних. DHT22 - сенсор для вимірювання температури та вологості. Фотоелектричний резистор - сенсор для вимірювання рівня освітленості. Світлодіод та резистор - додаткові компоненти для індикації стану системи. WiFi-з'єднання - забезпечує передачу даних на сервер через бездротову мережу.
Програмне забезпечення для ESP32 написано мовою C++ з використанням бібліотек для роботи з WiFi, HTTP, DHT22 та файлами для передачі файлів.
Основна логіка програми зосереджена у функції loop(), яка виконується безперервно. Спочатку пристрій перевіряє статус підключення до WiFi, і якщо з'єднання присутнє, починає зчитувати дані з датчиків. Для зчитування температури та вологості використовується бібліотека DHTesp, яка дозволяє легко отримувати дані з датчика DHT22, підключеного до піна 15. Рівень освітленості визначається шляхом зчитування аналогового сигналу з фотоелектричного резистора, підключеного до піна 34.
Отримані дані з датчиків перевіряються на коректність. Якщо дані з датчика температури або вологості виявляються некоректними, програма виводить повідомлення про помилку і робить паузу перед наступною спробою зчитування. Якщо всі дані отримані успішно, вони упаковуються у JSON-об'єкт за допомогою бібліотеки ArduinoJson. Створений JSON-об'єкт містить три ключі: temperature, humidity та brightness, що відповідають зчитаним значенням.
Після формування JSON-об'єкта програма налаштовує HTTP-з'єднання з сервером. Використовуючи бібліотеку HTTPClient, здійснюється POST-запит до сервера за вказаною URL-адресою. До заголовка запиту додаються необхідні поля, зокрема Content-Type з типом "application/json" та X-API-Key з API-ключем для автентифікації на сервері. JSON-об'єкт серіалізується у рядок і відправляється на сервер.
Після відправки запиту програма отримує код відповіді від сервера. Якщо код відповіді вказує на успішне виконання запиту пристрій виводить код відповіді на серійний монітор, що дозволяє користувачу бачити статус операції. Якщо виникає помилка, виводиться відповідний код помилки. Після завершення запиту HTTP-з'єднання закривається.
Цей цикл повторюється кожну хвилину, забезпечуючи постійний моніторинг умов у приміщенні, де перебуває тварина, та регулярне оновлення даних на сервері.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання створюється із метою описати структуру та взаємозв'язки компонентів програмної системи для контролю за тваринами у спеціальному готелі для тварин. Вона також відображає фізичну архітектуру системи, включаючи розташування апаратних та програмних ресурсів.
Враховуючи поточні вимоги до системи, то діаграма (див. рис. 2.1) містить чотири основні компоненти, які при взаємодії один із одним формують програмну систему. 


Рисунок 2.1 – Діаграма розгортання (Deployment Diagram)

Основним фізичним компонентом системи потрібно виділити сервер на якому буде відбуватися бізнес-логіка та виконуватися складні обчислення.
Сервер є центральним елементом програмної системи для контролю за тваринами у готелі. Фізично він має розміщуватися на потужному сервері з високими характеристиками продуктивності та надійності. Сервер виконує функції зберігання, обробки та управління даними, обчислення графіків харчування та перевірку даних про тварин і їх власників. Даний пристрій працює на фреймворку Spring Boot, який підтримує функціональність програми.
Використовуючи TCP/IP, він спілкується із базою даних, яка знаходиться на незалежному фізичному пристрої, який містить систему управління базами даних MySQL.  База даних використовується для зберігання інформації про тварин, господарів, оренду, адреса та графіки харчування.
Архітектурно сервер складається із слоїв: представлення, бізнес-логіки, доступом до бази даних. Сервер додатків надає API за специфікацією REST API для забезпечення взаємодії з мобільним додатком, Front-частиною та IoT пристроям. Далі дані переходять до сервісів, які їх обробляють та за необхідністю вони переходять до репозиторіїв, які зберігають всю інформацію до бази даних. Цей сервер також відповідає за обробку запитів від клієнтських додатків та забезпечення безпеки даних.
Мобільний додаток є одним з ключових компонентів програмної системи і розглядається як клієнтська частина. Фізично додаток розгортається на мобільних пристроях кінцевих користувачів. Додаток доступний на платформі Android та містить гнучку архітектуру, яка складається із слоїв: представлення, абстракції та взаємодії із серверною частиною.  
 Коли користувач взаємодіє із додатком, то він працює із  представлення, яке підтримує логіку роботи графічних елементів. Потім він взаємодіє із шаром доступу до даних, який надсилає серверу запит за допомогою API, отримуючи та відправляючи дані для обробки. Формат даних для відправки JSON, а протокол HTTP.
Фронтенд є важливою частиною програмної системи, яка забезпечує інтерфейс для взаємодії із системою для адміністраторів готелю для тварин. Фізично фронтенд розгортається на веб-сервері та доступний через веб-браузер. Даний веб-сервер використовує фреймворк React, який дозволяє реалізувати графічні елементи для користувача, а також зв’язок із сервером.
 Шар взаємодії відповідає за обробку даних користувача. Він містить логіку, яка реагує на дії користувача та взаємодіє з іншими компонентами та сервером для отримання та відправлення даних. Компоненти це набір невеликих, самодостатніх частин фронтенду, які виконують конкретні функції. Компоненти можуть бути перевикористані та забезпечують модульність та підтримку масштабування. Шар інтерфейсу це верхній рівень, який відповідає за відображення інтерфейсу користувача. Він включає в себе всі візуальні елементи, такі як кнопки, форми, таблиці, графіки тощо, які користувач може бачити та з якими він може взаємодіяти.
Інтернет речей (IoT) пристрій є важливою складовою частиною програмної системи для контролю за тваринами у готелі. Фізично IoT пристрої встановлюються безпосередньо у приміщеннях готелю та забезпечують збір даних про тварин у реальному часі. Пристрій має можливість бездротового зв'язку з сервером мережею Інтернет для передачі зібраних даних, тому буде використовуватися також формат передачі даних JSON та протокол HTTP.
Архітектурно він буде складатися із двох частин, а саме контролерів, які будуть надавати інформацію про стан кімнати та тварини, а також сервіси, які отримують дані із контролерів та обробляють і надсилають їх на сервер.
Взаємодія між клієнтськими частинами системи та сервером проводяться за допомогою файлів у форматі JSON та протоколу передачі даних HTTP. Сервер містить контролери, які будуть приймати всі запити від інших компонентів систем.

2 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ ТА ДІЯЛЬНОСТІ

Побудова діаграми компонентів - це процес візуалізації архітектури програмної системи або проекту, розбитого на окремі компоненти та їх зв'язки.
Спочатку потрібно визначити всі компоненти системи. Компонент може бути будь-яким логічним або фізичним модулем, що виконує певну функцію. Оскільки програмна система складається із кількох програм, то можна виділити основні компоненти, такі як: серверна частина, база даних, мобільний застосунок, пристрій, Front-частина. Всі вони поділяються на певні логічні компоненти, які пов’язані між собою інтерфейсами та дозволяють розширювати систему.
Серверна частина містить в собі кілька логічних компонентів, а саме: доступ до даних (data), бізнес-логіка (business logic), представлення (presentation). Кожен із них виконує свою роботу в межах серверної частини. Потрібно виділити, що бізнес-логіка використовує компонент доступу до даних за допомогою інтерфейсів репозиторіїв. Тобто він використовує “IRepo” для комунікації. Також бізнес-логіка використовує зовнішні компоненти, такі як: Stripe API та Dropbox API. Компонент представлення використовує бізнес-логіку використовуючи інтерфейси сервісів “IService”. Сервер взаємодіє із базою даних, що також являє собою компонентом, використовуючи JDBC.
Мобільний застосунок взаємодіє із серверною частиною за допомогою  “IMobile”. Цей компонент також складається із декількох логічних компонентів, такі як: доступ до даних (data), абстракція (domain), представлення (presentation). Доступ до даних та представлення використовують абстракції використовуючи інтерфейси репозиторіїв.
Front-частина також взаємодіє із серверною частиною через протоколи HTTP. Даний компонент містить кілька логічних компонентів: Components, UI elements. Вони працюють один із одним через інтерфейси компонентів “IComponents”.
IoT пристрій відіграє роль фізичного компонента системи, який також взаємодія із сервером через мережеві протоколи. Згідно опису структури компонентів та їх взаємодії була побудована діаграма компонентів (див. рис. 7.1).

Рисунок 2.1 - Діаграма компонентів (Component Diagram)

Діаграма діяльності (Activity Diagram) в UML є ефективним інструментом для моделювання процесів в IoT програмах. Вона допомагає візуалізувати потік управління між різними діями та рішеннями в системі. Спираючись на принцип побудови такої діаграми для IoT програми, що включає два основних випадки: отримання даних про стан та задання даних про стан, була побудована візуальна діаграма (див. рис. 2.2). 
Позначення стартового стану за допомогою "Initial Node" (чорний заповнений кружечок). Це позначає початок процесу в IoT програмі.
Після стартового стану слідує рішення, яке визначає подальший хід подій. Цей вузол рішення позначається ромбом. З рішення виходять дві стрілки, які ведуть до різних дій. Перша стрілка веде до дії "Отримати дані про стан". "Отримати дані про стан" позначається прямокутником (Activity Node), який описує процес отримання даних від IoT пристроїв. Це може включати зчитування сенсорних даних, отримання стану акторів або будь-яких інших даних від пристроїв.

Рисунок 2.2 - Діаграма діяльності (Component Diagram)

3 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Предметна область містить три типи користувачів на яких система має спиратися та реалізовувати свою функціональність залежно від потреб таких користувачів як клієнти, тобто власники тварин, адміністратор бази даних та адміністратор, який відповідає за бізнес-логіку системи. Кожен тип користувача має свій набір чітких функціональних потреб до продукту. 
Клієнт або власник тварини є основним типом користувача для даної предметної області, який повинен мати базові функції перегляду інформації та можливості з нею працювати та змінювати. Власник тварини може мати змогу переглянути інформацію про готелі, кімнати, обрати вільні кімнати, переглянути минулі оренди та поточні. Оскільки програмна система повинна мати певні способи монетизації, то клієнт зможе орендувати певну кімнату в певний період, щоб отримати доступ  до панелі контролю кімнати на період оренди. Така функціональність вимагає заповнення форми для надання інформаціє про тварину, номер картки, термін оренди. Зворотній зв’язок необхідний для користувача, щоб терміново повідомити про певні проблеми з його твариною. Перегляд власних тварин та їх додавання та редагування в системі, необхідна функція, щоб полегшити процес контролю та реєстрації тварини до системи. Кожен клієнт буде мати змогу редагувати свій власний профіль.
Описані функціональні потреби повністю характеризують необхідні функції для власника тварини та представленні у вигляді діаграми прецедентів (див. рис. 3.1).

Рисунок 3.1 – Діаграма прецедентів для клієнтів

Функціональні потреби адміністратора бази даних спираються на можливостях роботи бази даних та забезпечення цілісності даних, щоб керувати інформаційним змістом системи та сприяти її захисту. Даний вид адміністраторів має потребу переглядати всю інформацію, яка зберігається в системі про користувачів, тварин, оренди, кімнат та інші сутності, які наявні в системі. 
Оскільки адміністратор повинен не лише спостерігати за наявними даними, а й працювати з ними, тому він матиме потребу редагувати, видаляти, додавати різні види інформації. Бази даних зазвичай мають резервні копії, щоб уникнути ризику втрати інформації, тому функції резервного копіювання та відновлення системи після можливої аварії обов’язково мають бути в наявності даного адміністратора. Для візуалізації описаних функцій адміністратора бази даних було створено діаграму прецедентів для даного типу користувачів (див. рис. 3.2).

Рисунок 3.2 - Діаграма прецедентів для адміністратора бази даних

Останній вид користувачів це адміністратори бізнес-логіки програмної системи. Функціональні потреби даних адміністраторів спираються на контролі різних видів інформації та формування статистик, щодо роботи програмної системи загалом.  Всі функціональні потреби, які були описані для даного користувача,  представлені у вигляді діаграми прецедентів (див. рис. 3.3).

Рисунок 3.3 - Діаграма прецедентів для адміністратора бізнес-логіки

Даний вид адміністраторів буде мати можливість формувати статистику заробітку готелю в певний період часу, що дозволяє визначити доцільність витрат та стан певного готелю. Також присутня можливість визначати середню тривалість оренди кімнати, що дозволяє формувати нові бізнес-вимоги.
Система повинна надавати можливості реєстрації та автентифікації, оскільки дана функціональність характерна для всіх видів користувачів, то було прийняте рішення виділити даний функціонал на окремій діаграмі прецедентів (див. рис. 3.4).

Рисунок 3.4 – Діаграма прецедентів для неавторизованих користувачів

Під час формування діаграм прецедентів було виділено основні види користувачів для даної програмної системи та їхній функціонал, який був описаний, а також представлений у вигляді діаграм прецедентів.

ВИСНОВКИ

Під час виконання лабораторної роботи була розроблена IoT частина програмної системи із необхідним функціональними потребами. 
ДОДАТОК А
Код бізнес-логіки

1 #include <WiFi.h>
2 #include <HTTPClient.h>
3 #include <DHTesp.h>
4 #include <ArduinoJson.h>
5
6 const char* SSID = "Wokwi-GUEST";
7 const char* PASSWORD = "";
8
9 const char* SERVER_URL = "http://host.wokwi.internal:8080/device/3/updateState";
10 const char* API_KEY = "$2a$10$Upagga3BReZ1B9JgRixh7eiMAAgJRfPLJ4.qy0VnEaLL6Jyz.2g7K";
11
12 const char* HEADER_CONTENT_TYPE = "Content-Type";
13 const char* HEADER_CONTENT_TYPE_VALUE = "application/json";
14 const char* HEADER_API_KEY = "X-API-Key";
15
16 const int DHT_PIN = 15; 
17 const int LIGHT_SENSOR_PIN = 34; 
18
19
20 const char* MSG_CONNECTING_WIFI = "Connecting to WiFi...";
21 const char* MSG_CONNECTED_WIFI = "Connected to WiFi";
22 const char* MSG_FAILED_DHT = "Failed to read from DHT sensor!";
23 const char* MSG_HTTP_RESPONSE_CODE = "HTTP Response code: ";
24 const char* MSG_ERROR_CODE = "Error code: ";
25
26 DHTesp dht;
27
28 void setup() {
29   Serial.begin(115200);
30   dht.setup(DHT_PIN, DHTesp::DHT22);
31   WiFi.begin(SSID, PASSWORD);
32   while (WiFi.status() != WL_CONNECTED) {
33     delay(1000);
34     Serial.println(MSG_CONNECTING_WIFI);
35   }
36   Serial.println(MSG_CONNECTED_WIFI);
37 }
38
39 void loop() {
40   if (WiFi.status() == WL_CONNECTED) {
41     float temperature = dht.getTemperature();
42     float humidity = dht.getHumidity();
43     int lightLevel = analogRead(LIGHT_SENSOR_PIN);
44
45     if (isnan(temperature) || isnan(humidity)) {
46       Serial.println(MSG_FAILED_DHT);
47       delay(2000);
48       return;
49     }
50
51     StaticJsonDocument<200> doc;
52     doc["temperature"] = temperature;
53     doc["humidity"] = humidity;
54     doc["brightness"] = lightLevel;
55
56     HTTPClient http;
57     http.begin(SERVER_URL);
58     http.addHeader(HEADER_CONTENT_TYPE, HEADER_CONTENT_TYPE_VALUE);
59     http.addHeader(HEADER_API_KEY, API_KEY);
60     String jsonString;
61     serializeJson(doc, jsonString);
62     int httpResponseCode = http.POST(jsonString);
63
64     if (httpResponseCode > 0) {
65       Serial.print(MSG_HTTP_RESPONSE_CODE);
66       Serial.println(httpResponseCode);
67     } else {
68       Serial.print(MSG_ERROR_CODE);
69       Serial.println(httpResponseCode);
70     }
71
72     http.end();
73   }
74
75   delay(60000);
76 }
